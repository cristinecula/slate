---
layout: examples
---

<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.min.css">

<style type="text/css">
	.console { display: none; }

	.warning {
		font-weight: 200;
		color: #E24343;
	}

	h1 {
		font-size: 1em;
	}

	input, button {
		color: black;
	}

	.login-area {
		opacity: 0;
	}

	.app > .login-area ~ * {
		transition: opacity 300ms;
	}

	.app.init > .login-area {
		opacity: 1;
	}

	.app.init > .login-area ~ * {
		opacity: 0;
	}

	.widget-listing,
	.composition-listing {
		list-style: none;
		margin: 0;
		padding: 0;
		white-space: nowrap;
		overflow: auto;
		overflow-y: hidden;
	}

	.widget-listing li,
	.composition-listing li {
		display: inline-block;
	}

	.widget {
		position: relative;
		width: 142px;
	}

	.widget img {
		vertical-align: top;
		cursor: pointer;
		width: 142px;
		height: 100px;
	}

	.widget_name {
		position: absolute;
		left: 0;
		bottom: 0;
		right: 0;
		background: #000000;
		background: rgba(0,0,0, 0.5);
		overflow: hidden;
		text-overflow: ellipsis;
	}

	.widget.widget--new img {
		opacity: .2;
	}

	.edit-area_pane {
		background: rgb(81, 63, 89);
		box-shadow: 1px 1px 2px rgba(0,0,0,.5);
		width: 260px;
		margin: 20px auto;
		padding: 20px;
		transition: width 300ms;
	}

	.edit-area.edit-area--with-editor .edit-area_pane {
		width: 490px;
	}

	.edit-area_pane label {
		display: block;
	}

	.edit-area_pane label input {
		background: transparent;
		color: white;
		border: none;
		border-bottom: 2px solid rgb(39, 17, 48);
		margin: 5px 0;
	}

	.edit-area.init > * {
		display: none;
	}

	.edit-area.edit-area--with-editor label{
		display: none;
	}

	.edit-area .widget-area {
		margin: 0 auto;
	}

	.edit-area .editor-area {
		margin-top: 20px;
	}

	.embed-code-area {
		display: none;
	}

</style>

<h1>Quick and dirty CMS</h1>
<p>Login to your Widgetic account and manage your compositions, from the comfort of your website's CMS!</p>
<p class="warning">Keep in mind that this demo app is not sandboxed. Changes to compositions are persisted.</p>

<div class="app init">
	<div class="login-area">
		<button>Login with Widgetic</button>
	</div>

	<h1>Widgets</h1>
	<ul class="widget-listing"></ul>

	<h1>Compositions</h1>
	<ul class="composition-listing"></ul>

	<h1>Edit Area <span class="edit-area_status"></span></h1>
	<div class="edit-area init">
		<div class="widget-area"></div>

		<div class="edit-area_pane">
			<button class="save">Save</button>
			<button class="toggle-editor">Toggle Editor</button>
			<button class="delete">Delete</button>

			<div class="editor-area"></div>

			<label>Name: <input class="name" /></label>
			<label>Width: <input class="width" /></label>
			<label>Height: <input class="height" /></label>
		</div>		

		<div class="embed-code-area">
			<h1>Embed Code</h1>
			<code></code>
		</div>
	</div>
</div>

<script>
(function() {
	var LoginArea = function(el) {
		this.el = el;

		var button = this.el.find('button');
		button.on('click', this.doLogin.bind(this, true))

		// do a background login
		this.doLogin(false);
	}

	LoginArea.prototype.doLogin = function(interactive) {
		return Widgetic.auth(interactive)
			.then(function() {
				this.el.trigger('login-success')
			}.bind(this))
			.fail(function() {
				this.el.trigger('login-fail')
			}.bind(this))
	};

	var template = function(data) {
		return '<div class="widget'+ (data.isNew?' widget--new':'') +'">'+
				'<img src="http://widgetic.com' + data.previews.small + '"/>'+
				'<span class="widget_name">'+ data.name + '</span>' +
			'</div>';
	}

	var WidgetListing = function(el) {
		this.el = el;

		this.el.on('click', 'li', this._onWidgetClick.bind(this))
	}

	WidgetListing.prototype.load = function() {
		this.el.html('Loading the widgets!');

		return Widgetic.api('widgets')
			.then(this._onWidgetsLoaded.bind(this))
	};

	WidgetListing.prototype._onWidgetsLoaded = function(widgets) {
		this.el.empty();

		widgets.map(function(widget) {
			var item = $('<li>')
				.html(template(widget))
				.data('widget', widget)
			this.el.append(item)
		}.bind(this))
	};

	WidgetListing.prototype._onWidgetClick = function(ev) {
		var widget = $(ev.currentTarget).data('widget');
		this.el.trigger('widget-selected', widget);
	};

	var CompositionListing = function(el) {
		this.el = el;

		this.el.on('click', 'li', this._onCompositionClick.bind(this))

		this.el.html('Select a widget to list the available compositions!');
	}

	CompositionListing.prototype.load = function(widget) {
		this.widget = widget;

		return Widgetic.api('compositions', {widget_id: widget.id})
			.then(this._onCompositionsLoaded.bind(this))
	};

	CompositionListing.prototype.refresh = function() {
		this.load(this.widget);
	}

	CompositionListing.prototype._onCompositionsLoaded = function(compositions) {
		this.el.empty()
		
		compositions.map(function(composition) {
			var item = $('<li>')
				.html(template({previews: this.widget.previews, name: composition.name}))
				.data('composition', composition)
			this.el.append(item)
		}.bind(this))

		var item = $('<li>')
			.html(template({isNew: true, previews: this.widget.previews, name: 'Create new composition'}))
			.data('widget', this.widget)
		this.el.append(item)
	}

	CompositionListing.prototype._onCompositionClick = function(ev) {
		var composition = $(ev.currentTarget).data('composition');
		if(composition) {
			this.el.trigger('composition-selected', composition);
		} else {
			this.el.trigger('widget-selected',  $(ev.currentTarget).data('widget'));
		}
	};

	var EditArea = function(el, status) {
		this.el = el;
		this.status = status;

		this.widgetArea    = this.el.find('.widget-area');
		this.editorArea    = this.el.find('.editor-area');
		this.nameInput     = this.el.find('input.name');
		this.widthInput    = this.el.find('input.width');
		this.heightInput   = this.el.find('input.height');
		this.embedCodeArea = this.el.find('.embed-code-area');

		this.el.on('click', '.save', function() {
			if(this.showEditor) {
				this.editor.save();
			} else {
				this.widget.save();
			}
		}.bind(this));

		this.el.on('click', '.delete', this._onDeleteClicked.bind(this));

		this.el.on('change', '.name', function(ev) {
			this.widget.setName(this.nameInput.val());
		}.bind(this));

		this.el.on('change', '.width', function(ev) {
			this.widgetArea.width(parseInt(this.widthInput.val()));
		}.bind(this));

		this.el.on('change', '.height', function(ev) {
			this.widgetArea.height(parseInt(this.heightInput.val()));
		}.bind(this));

		this.el.on('click', '.toggle-editor', this._onToggleClick.bind(this));
	}

	EditArea.prototype.new = function(widget) {
		this.currentComposition = null;
		this.currentWidget = widget;
		this.el.removeClass('init')

		this.toggleEditor(false);

		this.nameInput.val('');
		this.widthInput.val(widget.width)
		this.heightInput.val(widget.height)

		this.widgetArea.css({
			width: widget.width,
			height: widget.height
		});

		this.status.text('- New composition for: ' + widget.name);

		this._hideEmbedCode();

		if(this.widget)  { this.widget.close() }
		this.widget = Widgetic.UI.composition(
			this.widgetArea[0], {
				widget_id: widget.id,
				wait_editor_init: true
			}
		);

		window.widget = this.widget

		this.widget.on('save', this._onSave.bind(this));
	};

	EditArea.prototype.edit = function(composition) {
		this.currentComposition = composition;

		this.toggleEditor(false);

		this.nameInput.val(composition.name);
		this.widthInput.val(composition.width)
		this.heightInput.val(composition.height)

		this.widgetArea.css({
			width: composition.width,
			height: composition.height
		});

		this.status.text('- Editing composition: ' + composition.name);

		this._showEmbedCode(composition);

		if(this.widget)  { this.widget.close() }
		this.widget = new Widgetic.UI.composition(
			this.widgetArea[0], composition.id
		);

		this.widget.on('save', this._onSave.bind(this));
	};

	EditArea.prototype.toggleEditor = function(show) {
		this.showEditor = !this.showEditor
		if(typeof show !== 'undefined') { this.showEditor = show; }

		if(this.showEditor) {
			this._showEditor();
		} else {
			this._hideEditor()
		}

		this.el.toggleClass('edit-area--with-editor', this.showEditor)
	}

	EditArea.prototype._onSave = function(ev) {
		this.currentComposition = ev.composition;
		if(ev.opts.fromApi) {
			this.toggleEditor(false);
			this.el.trigger('composition-saved', ev.composition)
			this._showEmbedCode(ev.composition);
		}
	};

	EditArea.prototype._onDeleteClicked = function() {
		if(!this.currentComposition) {
			window.alert('The current composition is not saved!');
			return;
		}

		if(window.confirm('Are you sure you want to delete the composition?')) {
			Widgetic.api('compositions/' + this.currentComposition.id, 'DELETE')
				.then(function() {
					this.el.trigger('composition-deleted');
					this.new(this.currentWidget);
				}.bind(this));
		}
	}

	EditArea.prototype._onToggleClick = function() {
		this.toggleEditor();
	}

	EditArea.prototype._showEditor = function() {
		if(!this.widget) return;
		if(this.editor) return;

		this.editor = new Widgetic.UI.editor(
			this.editorArea[0], this.widget
		);
	}

	EditArea.prototype._hideEditor = function() {
		if(!this.editor) return;
		
		this.editor.close();
		this.editor = null;
	}

	EditArea.prototype._hideEmbedCode = function() {		
		this.embedCodeArea.hide();
	};

	EditArea.prototype._showEmbedCode = function(composition) {
		this.embedCodeArea.show();
		var code = '<a href="https://widgetic.com/widgets/'+ this.currentWidget.category +'/'+ this.currentWidget.slug +'/" class="widgetic-composition" data-id="'+ composition.id +'" data-width="'+ this.widthInput.val() + '" data-height="'+ this.heightInput.val() + '" data-resize="allow-scale-down">'+ this.currentWidget.name +'</a>';
		this.embedCodeArea.find('code').text(code);
	}


	var App = function(el) {
		this.el = el;

		this.loginArea          = new LoginArea(this.el.find('.login-area'));
		this.widgetListing      = new WidgetListing(this.el.find('.widget-listing'));
		this.compositionListing = new CompositionListing(this.el.find('.composition-listing'));
		this.editArea           = new EditArea(this.el.find('.edit-area'), this.el.find('.edit-area_status'));

		this.el.on('login-success',        this._onLoginSuccess.bind(this))
		this.el.on('widget-selected',      this._onWidgetSelected.bind(this))
		this.el.on('composition-selected', this._onCompositionSelected.bind(this))
		this.el.on('composition-saved',    this._refresh.bind(this))
		this.el.on('composition-deleted',  this._refresh.bind(this))
	}

	App.prototype._onLoginSuccess = function() {
		this.el.removeClass('init')
		this.widgetListing.load();
	};

	App.prototype._onWidgetSelected = function(ev, widget) {
		this.compositionListing.load(widget);
		this.editArea.new(widget);
	};

	App.prototype._onCompositionSelected = function(ev, composition) {
		this.editArea.edit(composition);
	};

	App.prototype._refresh = function() {
		this.compositionListing.refresh();
	};

	var app = new App($('.app'));
}());
</script>